package atlas

import (
	"context"
	"fmt"
	"github.com/brunoscheufler/atlas/atlasfile"
	"github.com/brunoscheufler/atlas/helper"
	"github.com/sirupsen/logrus"
	"os"
	"path/filepath"
	"sort"
)

func Env(ctx context.Context, logger logrus.FieldLogger, version, cwd string, stackName, serviceName string) error {
	initialCwd := cwd

	cwd, err := atlasfile.FindRootDir(cwd)
	if err != nil {
		return fmt.Errorf("could not find root directory: %w", err)
	}

	logger.WithField("cwd", cwd).Debugf("Found root directory")

	mergedFile, err := atlasfile.Collect(ctx, logger, version, cwd)
	if err != nil {
		return fmt.Errorf("could not collect atlas files: %w", err)
	}

	stack := mergedFile.GetStack(stackName)
	if stack == nil {
		return fmt.Errorf("stack %s not found", stackName)
	}

	service := mergedFile.GetService(serviceName)
	if service == nil {
		return fmt.Errorf("service %s not found", serviceName)
	}

	stackService := stack.GetService(serviceName)
	if stackService == nil {
		return fmt.Errorf("service %s not found in stack %s", serviceName, stackName)
	}

	envVars := make(map[string]string, 0)

	for _, filePath := range service.EnvironmentFiles {
		filePath := filepath.Join(filepath.Dir(service.GetDirpath()), filePath)

		readVars, err := helper.ReadEnvFile(filePath)
		if err != nil {
			return fmt.Errorf("could not read environment file %s: %w", filePath, err)
		}

		for k, v := range readVars {
			envVars[k] = v
		}
	}

	for k, v := range service.Environment {
		envVars[k] = v
	}

	for k, v := range stackService.Environment {
		envVars[k] = v
	}

	sorted := mapToSortedSlice(envVars)

	var output string

	output += fmt.Sprintf("# Auto-generated by atlas env using Atlas %s\n", version)
	output += "# DO NOT EDIT, PERFORM CHANGES IN ATLASFILES INSTEAD AND ADD THIS FILE TO .gitignore\n"

	for _, line := range sorted {
		output += line + "\n"
	}

	envLocalPath := filepath.Join(initialCwd, ".env.local")

	err = os.WriteFile(envLocalPath, []byte(output), 0644)
	if err != nil {
		return fmt.Errorf("could not write .env.local: %w", err)
	}

	logger.
		WithField("cwd", initialCwd).
		WithField("service", serviceName).
		WithField("stack", stackName).
		Infoln("Synced .env.local with service environment")

	return nil
}

func mapToSortedSlice(m map[string]string) []string {
	s := make([]string, 0)
	for k, v := range m {
		s = append(s, fmt.Sprintf("%s=%s", k, v))
	}
	sort.Strings(s)
	return s
}
