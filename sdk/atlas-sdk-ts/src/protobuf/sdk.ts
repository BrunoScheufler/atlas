/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.5
 * source: protobuf/sdk.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace sdk {
    export class ConfigureRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            environmentProviderId?: string;
            configValues?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("environmentProviderId" in data && data.environmentProviderId != undefined) {
                    this.environmentProviderId = data.environmentProviderId;
                }
                if ("configValues" in data && data.configValues != undefined) {
                    this.configValues = data.configValues;
                }
            }
        }
        get environmentProviderId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set environmentProviderId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get configValues() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set configValues(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            environmentProviderId?: string;
            configValues?: string;
        }): ConfigureRequest {
            const message = new ConfigureRequest({});
            if (data.environmentProviderId != null) {
                message.environmentProviderId = data.environmentProviderId;
            }
            if (data.configValues != null) {
                message.configValues = data.configValues;
            }
            return message;
        }
        toObject() {
            const data: {
                environmentProviderId?: string;
                configValues?: string;
            } = {};
            if (this.environmentProviderId != null) {
                data.environmentProviderId = this.environmentProviderId;
            }
            if (this.configValues != null) {
                data.configValues = this.configValues;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.environmentProviderId.length)
                writer.writeString(1, this.environmentProviderId);
            if (this.configValues.length)
                writer.writeString(2, this.configValues);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConfigureRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConfigureRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.environmentProviderId = reader.readString();
                        break;
                    case 2:
                        message.configValues = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConfigureRequest {
            return ConfigureRequest.deserialize(bytes);
        }
    }
    export class ConfigureReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): ConfigureReply {
            const message = new ConfigureReply({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConfigureReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConfigureReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConfigureReply {
            return ConfigureReply.deserialize(bytes);
        }
    }
    export class CreateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            environmentProviderId?: string;
            inputValues?: string;
            resourceInfo?: string;
            deploymentInfo?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("environmentProviderId" in data && data.environmentProviderId != undefined) {
                    this.environmentProviderId = data.environmentProviderId;
                }
                if ("inputValues" in data && data.inputValues != undefined) {
                    this.inputValues = data.inputValues;
                }
                if ("resourceInfo" in data && data.resourceInfo != undefined) {
                    this.resourceInfo = data.resourceInfo;
                }
                if ("deploymentInfo" in data && data.deploymentInfo != undefined) {
                    this.deploymentInfo = data.deploymentInfo;
                }
            }
        }
        get environmentProviderId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set environmentProviderId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get inputValues() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set inputValues(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get resourceInfo() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set resourceInfo(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get deploymentInfo() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set deploymentInfo(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            environmentProviderId?: string;
            inputValues?: string;
            resourceInfo?: string;
            deploymentInfo?: string;
        }): CreateRequest {
            const message = new CreateRequest({});
            if (data.environmentProviderId != null) {
                message.environmentProviderId = data.environmentProviderId;
            }
            if (data.inputValues != null) {
                message.inputValues = data.inputValues;
            }
            if (data.resourceInfo != null) {
                message.resourceInfo = data.resourceInfo;
            }
            if (data.deploymentInfo != null) {
                message.deploymentInfo = data.deploymentInfo;
            }
            return message;
        }
        toObject() {
            const data: {
                environmentProviderId?: string;
                inputValues?: string;
                resourceInfo?: string;
                deploymentInfo?: string;
            } = {};
            if (this.environmentProviderId != null) {
                data.environmentProviderId = this.environmentProviderId;
            }
            if (this.inputValues != null) {
                data.inputValues = this.inputValues;
            }
            if (this.resourceInfo != null) {
                data.resourceInfo = this.resourceInfo;
            }
            if (this.deploymentInfo != null) {
                data.deploymentInfo = this.deploymentInfo;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.environmentProviderId.length)
                writer.writeString(1, this.environmentProviderId);
            if (this.inputValues.length)
                writer.writeString(2, this.inputValues);
            if (this.resourceInfo.length)
                writer.writeString(3, this.resourceInfo);
            if (this.deploymentInfo.length)
                writer.writeString(4, this.deploymentInfo);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.environmentProviderId = reader.readString();
                        break;
                    case 2:
                        message.inputValues = reader.readString();
                        break;
                    case 3:
                        message.resourceInfo = reader.readString();
                        break;
                    case 4:
                        message.deploymentInfo = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateRequest {
            return CreateRequest.deserialize(bytes);
        }
    }
    export class CreateReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            state?: string;
            outputValues?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("state" in data && data.state != undefined) {
                    this.state = data.state;
                }
                if ("outputValues" in data && data.outputValues != undefined) {
                    this.outputValues = data.outputValues;
                }
            }
        }
        get state() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set state(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get outputValues() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set outputValues(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            state?: string;
            outputValues?: string;
        }): CreateReply {
            const message = new CreateReply({});
            if (data.state != null) {
                message.state = data.state;
            }
            if (data.outputValues != null) {
                message.outputValues = data.outputValues;
            }
            return message;
        }
        toObject() {
            const data: {
                state?: string;
                outputValues?: string;
            } = {};
            if (this.state != null) {
                data.state = this.state;
            }
            if (this.outputValues != null) {
                data.outputValues = this.outputValues;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.state.length)
                writer.writeString(1, this.state);
            if (this.outputValues.length)
                writer.writeString(2, this.outputValues);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.state = reader.readString();
                        break;
                    case 2:
                        message.outputValues = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateReply {
            return CreateReply.deserialize(bytes);
        }
    }
    export class ReadRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            environmentProviderId?: string;
            state?: string;
            resourceInfo?: string;
            deploymentInfo?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("environmentProviderId" in data && data.environmentProviderId != undefined) {
                    this.environmentProviderId = data.environmentProviderId;
                }
                if ("state" in data && data.state != undefined) {
                    this.state = data.state;
                }
                if ("resourceInfo" in data && data.resourceInfo != undefined) {
                    this.resourceInfo = data.resourceInfo;
                }
                if ("deploymentInfo" in data && data.deploymentInfo != undefined) {
                    this.deploymentInfo = data.deploymentInfo;
                }
            }
        }
        get environmentProviderId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set environmentProviderId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get state() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set state(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get resourceInfo() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set resourceInfo(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get deploymentInfo() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set deploymentInfo(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            environmentProviderId?: string;
            state?: string;
            resourceInfo?: string;
            deploymentInfo?: string;
        }): ReadRequest {
            const message = new ReadRequest({});
            if (data.environmentProviderId != null) {
                message.environmentProviderId = data.environmentProviderId;
            }
            if (data.state != null) {
                message.state = data.state;
            }
            if (data.resourceInfo != null) {
                message.resourceInfo = data.resourceInfo;
            }
            if (data.deploymentInfo != null) {
                message.deploymentInfo = data.deploymentInfo;
            }
            return message;
        }
        toObject() {
            const data: {
                environmentProviderId?: string;
                state?: string;
                resourceInfo?: string;
                deploymentInfo?: string;
            } = {};
            if (this.environmentProviderId != null) {
                data.environmentProviderId = this.environmentProviderId;
            }
            if (this.state != null) {
                data.state = this.state;
            }
            if (this.resourceInfo != null) {
                data.resourceInfo = this.resourceInfo;
            }
            if (this.deploymentInfo != null) {
                data.deploymentInfo = this.deploymentInfo;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.environmentProviderId.length)
                writer.writeString(1, this.environmentProviderId);
            if (this.state.length)
                writer.writeString(2, this.state);
            if (this.resourceInfo.length)
                writer.writeString(3, this.resourceInfo);
            if (this.deploymentInfo.length)
                writer.writeString(4, this.deploymentInfo);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReadRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReadRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.environmentProviderId = reader.readString();
                        break;
                    case 2:
                        message.state = reader.readString();
                        break;
                    case 3:
                        message.resourceInfo = reader.readString();
                        break;
                    case 4:
                        message.deploymentInfo = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReadRequest {
            return ReadRequest.deserialize(bytes);
        }
    }
    export class ReadReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            state?: string;
            outputValues?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("state" in data && data.state != undefined) {
                    this.state = data.state;
                }
                if ("outputValues" in data && data.outputValues != undefined) {
                    this.outputValues = data.outputValues;
                }
            }
        }
        get state() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set state(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get outputValues() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set outputValues(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            state?: string;
            outputValues?: string;
        }): ReadReply {
            const message = new ReadReply({});
            if (data.state != null) {
                message.state = data.state;
            }
            if (data.outputValues != null) {
                message.outputValues = data.outputValues;
            }
            return message;
        }
        toObject() {
            const data: {
                state?: string;
                outputValues?: string;
            } = {};
            if (this.state != null) {
                data.state = this.state;
            }
            if (this.outputValues != null) {
                data.outputValues = this.outputValues;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.state.length)
                writer.writeString(1, this.state);
            if (this.outputValues.length)
                writer.writeString(2, this.outputValues);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReadReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReadReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.state = reader.readString();
                        break;
                    case 2:
                        message.outputValues = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReadReply {
            return ReadReply.deserialize(bytes);
        }
    }
    export class UpdateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            environmentProviderId?: string;
            state?: string;
            inputValues?: string;
            resourceInfo?: string;
            deploymentInfo?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("environmentProviderId" in data && data.environmentProviderId != undefined) {
                    this.environmentProviderId = data.environmentProviderId;
                }
                if ("state" in data && data.state != undefined) {
                    this.state = data.state;
                }
                if ("inputValues" in data && data.inputValues != undefined) {
                    this.inputValues = data.inputValues;
                }
                if ("resourceInfo" in data && data.resourceInfo != undefined) {
                    this.resourceInfo = data.resourceInfo;
                }
                if ("deploymentInfo" in data && data.deploymentInfo != undefined) {
                    this.deploymentInfo = data.deploymentInfo;
                }
            }
        }
        get environmentProviderId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set environmentProviderId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get state() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set state(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get inputValues() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set inputValues(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get resourceInfo() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set resourceInfo(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get deploymentInfo() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set deploymentInfo(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            environmentProviderId?: string;
            state?: string;
            inputValues?: string;
            resourceInfo?: string;
            deploymentInfo?: string;
        }): UpdateRequest {
            const message = new UpdateRequest({});
            if (data.environmentProviderId != null) {
                message.environmentProviderId = data.environmentProviderId;
            }
            if (data.state != null) {
                message.state = data.state;
            }
            if (data.inputValues != null) {
                message.inputValues = data.inputValues;
            }
            if (data.resourceInfo != null) {
                message.resourceInfo = data.resourceInfo;
            }
            if (data.deploymentInfo != null) {
                message.deploymentInfo = data.deploymentInfo;
            }
            return message;
        }
        toObject() {
            const data: {
                environmentProviderId?: string;
                state?: string;
                inputValues?: string;
                resourceInfo?: string;
                deploymentInfo?: string;
            } = {};
            if (this.environmentProviderId != null) {
                data.environmentProviderId = this.environmentProviderId;
            }
            if (this.state != null) {
                data.state = this.state;
            }
            if (this.inputValues != null) {
                data.inputValues = this.inputValues;
            }
            if (this.resourceInfo != null) {
                data.resourceInfo = this.resourceInfo;
            }
            if (this.deploymentInfo != null) {
                data.deploymentInfo = this.deploymentInfo;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.environmentProviderId.length)
                writer.writeString(1, this.environmentProviderId);
            if (this.state.length)
                writer.writeString(2, this.state);
            if (this.inputValues.length)
                writer.writeString(3, this.inputValues);
            if (this.resourceInfo.length)
                writer.writeString(4, this.resourceInfo);
            if (this.deploymentInfo.length)
                writer.writeString(5, this.deploymentInfo);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.environmentProviderId = reader.readString();
                        break;
                    case 2:
                        message.state = reader.readString();
                        break;
                    case 3:
                        message.inputValues = reader.readString();
                        break;
                    case 4:
                        message.resourceInfo = reader.readString();
                        break;
                    case 5:
                        message.deploymentInfo = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateRequest {
            return UpdateRequest.deserialize(bytes);
        }
    }
    export class UpdateReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            state?: string;
            outputValues?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("state" in data && data.state != undefined) {
                    this.state = data.state;
                }
                if ("outputValues" in data && data.outputValues != undefined) {
                    this.outputValues = data.outputValues;
                }
            }
        }
        get state() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set state(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get outputValues() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set outputValues(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            state?: string;
            outputValues?: string;
        }): UpdateReply {
            const message = new UpdateReply({});
            if (data.state != null) {
                message.state = data.state;
            }
            if (data.outputValues != null) {
                message.outputValues = data.outputValues;
            }
            return message;
        }
        toObject() {
            const data: {
                state?: string;
                outputValues?: string;
            } = {};
            if (this.state != null) {
                data.state = this.state;
            }
            if (this.outputValues != null) {
                data.outputValues = this.outputValues;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.state.length)
                writer.writeString(1, this.state);
            if (this.outputValues.length)
                writer.writeString(2, this.outputValues);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.state = reader.readString();
                        break;
                    case 2:
                        message.outputValues = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateReply {
            return UpdateReply.deserialize(bytes);
        }
    }
    export class DeleteRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            environmentProviderId?: string;
            state?: string;
            resourceInfo?: string;
            deploymentInfo?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("environmentProviderId" in data && data.environmentProviderId != undefined) {
                    this.environmentProviderId = data.environmentProviderId;
                }
                if ("state" in data && data.state != undefined) {
                    this.state = data.state;
                }
                if ("resourceInfo" in data && data.resourceInfo != undefined) {
                    this.resourceInfo = data.resourceInfo;
                }
                if ("deploymentInfo" in data && data.deploymentInfo != undefined) {
                    this.deploymentInfo = data.deploymentInfo;
                }
            }
        }
        get environmentProviderId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set environmentProviderId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get state() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set state(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get resourceInfo() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set resourceInfo(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get deploymentInfo() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set deploymentInfo(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            environmentProviderId?: string;
            state?: string;
            resourceInfo?: string;
            deploymentInfo?: string;
        }): DeleteRequest {
            const message = new DeleteRequest({});
            if (data.environmentProviderId != null) {
                message.environmentProviderId = data.environmentProviderId;
            }
            if (data.state != null) {
                message.state = data.state;
            }
            if (data.resourceInfo != null) {
                message.resourceInfo = data.resourceInfo;
            }
            if (data.deploymentInfo != null) {
                message.deploymentInfo = data.deploymentInfo;
            }
            return message;
        }
        toObject() {
            const data: {
                environmentProviderId?: string;
                state?: string;
                resourceInfo?: string;
                deploymentInfo?: string;
            } = {};
            if (this.environmentProviderId != null) {
                data.environmentProviderId = this.environmentProviderId;
            }
            if (this.state != null) {
                data.state = this.state;
            }
            if (this.resourceInfo != null) {
                data.resourceInfo = this.resourceInfo;
            }
            if (this.deploymentInfo != null) {
                data.deploymentInfo = this.deploymentInfo;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.environmentProviderId.length)
                writer.writeString(1, this.environmentProviderId);
            if (this.state.length)
                writer.writeString(2, this.state);
            if (this.resourceInfo.length)
                writer.writeString(3, this.resourceInfo);
            if (this.deploymentInfo.length)
                writer.writeString(4, this.deploymentInfo);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.environmentProviderId = reader.readString();
                        break;
                    case 2:
                        message.state = reader.readString();
                        break;
                    case 3:
                        message.resourceInfo = reader.readString();
                        break;
                    case 4:
                        message.deploymentInfo = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteRequest {
            return DeleteRequest.deserialize(bytes);
        }
    }
    export class DeleteReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): DeleteReply {
            const message = new DeleteReply({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteReply {
            return DeleteReply.deserialize(bytes);
        }
    }
    export class PingRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): PingRequest {
            const message = new PingRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PingRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PingRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PingRequest {
            return PingRequest.deserialize(bytes);
        }
    }
    export class PingReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): PingReply {
            const message = new PingReply({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PingReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PingReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PingReply {
            return PingReply.deserialize(bytes);
        }
    }
    export class InvokeFunctionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            environmentProviderId?: string;
            functionName?: string;
            argumentValues?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("environmentProviderId" in data && data.environmentProviderId != undefined) {
                    this.environmentProviderId = data.environmentProviderId;
                }
                if ("functionName" in data && data.functionName != undefined) {
                    this.functionName = data.functionName;
                }
                if ("argumentValues" in data && data.argumentValues != undefined) {
                    this.argumentValues = data.argumentValues;
                }
            }
        }
        get environmentProviderId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set environmentProviderId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get functionName() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set functionName(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get argumentValues() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set argumentValues(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            environmentProviderId?: string;
            functionName?: string;
            argumentValues?: string;
        }): InvokeFunctionRequest {
            const message = new InvokeFunctionRequest({});
            if (data.environmentProviderId != null) {
                message.environmentProviderId = data.environmentProviderId;
            }
            if (data.functionName != null) {
                message.functionName = data.functionName;
            }
            if (data.argumentValues != null) {
                message.argumentValues = data.argumentValues;
            }
            return message;
        }
        toObject() {
            const data: {
                environmentProviderId?: string;
                functionName?: string;
                argumentValues?: string;
            } = {};
            if (this.environmentProviderId != null) {
                data.environmentProviderId = this.environmentProviderId;
            }
            if (this.functionName != null) {
                data.functionName = this.functionName;
            }
            if (this.argumentValues != null) {
                data.argumentValues = this.argumentValues;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.environmentProviderId.length)
                writer.writeString(1, this.environmentProviderId);
            if (this.functionName.length)
                writer.writeString(2, this.functionName);
            if (this.argumentValues.length)
                writer.writeString(3, this.argumentValues);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InvokeFunctionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InvokeFunctionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.environmentProviderId = reader.readString();
                        break;
                    case 2:
                        message.functionName = reader.readString();
                        break;
                    case 3:
                        message.argumentValues = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InvokeFunctionRequest {
            return InvokeFunctionRequest.deserialize(bytes);
        }
    }
    export class InvokeFunctionReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            environmentProviderId?: string;
            outputValue?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("environmentProviderId" in data && data.environmentProviderId != undefined) {
                    this.environmentProviderId = data.environmentProviderId;
                }
                if ("outputValue" in data && data.outputValue != undefined) {
                    this.outputValue = data.outputValue;
                }
            }
        }
        get environmentProviderId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set environmentProviderId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get outputValue() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set outputValue(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            environmentProviderId?: string;
            outputValue?: string;
        }): InvokeFunctionReply {
            const message = new InvokeFunctionReply({});
            if (data.environmentProviderId != null) {
                message.environmentProviderId = data.environmentProviderId;
            }
            if (data.outputValue != null) {
                message.outputValue = data.outputValue;
            }
            return message;
        }
        toObject() {
            const data: {
                environmentProviderId?: string;
                outputValue?: string;
            } = {};
            if (this.environmentProviderId != null) {
                data.environmentProviderId = this.environmentProviderId;
            }
            if (this.outputValue != null) {
                data.outputValue = this.outputValue;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.environmentProviderId.length)
                writer.writeString(1, this.environmentProviderId);
            if (this.outputValue.length)
                writer.writeString(2, this.outputValue);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InvokeFunctionReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InvokeFunctionReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.environmentProviderId = reader.readString();
                        break;
                    case 2:
                        message.outputValue = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InvokeFunctionReply {
            return InvokeFunctionReply.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedProviderService {
        static definition = {
            Configure: {
                path: "/sdk.Provider/Configure",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ConfigureRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ConfigureRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ConfigureReply) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ConfigureReply.deserialize(new Uint8Array(bytes))
            },
            Create: {
                path: "/sdk.Provider/Create",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateReply) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateReply.deserialize(new Uint8Array(bytes))
            },
            Read: {
                path: "/sdk.Provider/Read",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ReadRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ReadRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ReadReply) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ReadReply.deserialize(new Uint8Array(bytes))
            },
            Update: {
                path: "/sdk.Provider/Update",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UpdateReply) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UpdateReply.deserialize(new Uint8Array(bytes))
            },
            Delete: {
                path: "/sdk.Provider/Delete",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeleteReply) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeleteReply.deserialize(new Uint8Array(bytes))
            },
            Ping: {
                path: "/sdk.Provider/Ping",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: PingRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => PingRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: PingReply) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => PingReply.deserialize(new Uint8Array(bytes))
            },
            InvokeFunction: {
                path: "/sdk.Provider/InvokeFunction",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: InvokeFunctionRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => InvokeFunctionRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: InvokeFunctionReply) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => InvokeFunctionReply.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Configure(call: grpc_1.ServerUnaryCall<ConfigureRequest, ConfigureReply>, callback: grpc_1.sendUnaryData<ConfigureReply>): void;
        abstract Create(call: grpc_1.ServerUnaryCall<CreateRequest, CreateReply>, callback: grpc_1.sendUnaryData<CreateReply>): void;
        abstract Read(call: grpc_1.ServerUnaryCall<ReadRequest, ReadReply>, callback: grpc_1.sendUnaryData<ReadReply>): void;
        abstract Update(call: grpc_1.ServerUnaryCall<UpdateRequest, UpdateReply>, callback: grpc_1.sendUnaryData<UpdateReply>): void;
        abstract Delete(call: grpc_1.ServerUnaryCall<DeleteRequest, DeleteReply>, callback: grpc_1.sendUnaryData<DeleteReply>): void;
        abstract Ping(call: grpc_1.ServerUnaryCall<PingRequest, PingReply>, callback: grpc_1.sendUnaryData<PingReply>): void;
        abstract InvokeFunction(call: grpc_1.ServerUnaryCall<InvokeFunctionRequest, InvokeFunctionReply>, callback: grpc_1.sendUnaryData<InvokeFunctionReply>): void;
    }
    export class ProviderClient extends grpc_1.makeGenericClientConstructor(UnimplementedProviderService.definition, "Provider", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Configure: GrpcPromiseServiceInterface<ConfigureRequest, ConfigureReply> = (message: ConfigureRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<ConfigureReply> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.Configure(message, metadata, options, (error: grpc_1.ServiceError, response: ConfigureReply) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        Create: GrpcPromiseServiceInterface<CreateRequest, CreateReply> = (message: CreateRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<CreateReply> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.Create(message, metadata, options, (error: grpc_1.ServiceError, response: CreateReply) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        Read: GrpcPromiseServiceInterface<ReadRequest, ReadReply> = (message: ReadRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<ReadReply> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.Read(message, metadata, options, (error: grpc_1.ServiceError, response: ReadReply) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        Update: GrpcPromiseServiceInterface<UpdateRequest, UpdateReply> = (message: UpdateRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<UpdateReply> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.Update(message, metadata, options, (error: grpc_1.ServiceError, response: UpdateReply) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        Delete: GrpcPromiseServiceInterface<DeleteRequest, DeleteReply> = (message: DeleteRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<DeleteReply> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.Delete(message, metadata, options, (error: grpc_1.ServiceError, response: DeleteReply) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        Ping: GrpcPromiseServiceInterface<PingRequest, PingReply> = (message: PingRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<PingReply> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.Ping(message, metadata, options, (error: grpc_1.ServiceError, response: PingReply) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        InvokeFunction: GrpcPromiseServiceInterface<InvokeFunctionRequest, InvokeFunctionReply> = (message: InvokeFunctionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<InvokeFunctionReply> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.InvokeFunction(message, metadata, options, (error: grpc_1.ServiceError, response: InvokeFunctionReply) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
    }
}
